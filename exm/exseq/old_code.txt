  
    ### =============== Check alignment==================
    def inspect_alignment_singleFovCode(self, fov, code, ROI_min=[0,0,0], ROI_max= None,num_layer = 4,modified = False):
        
        '''
        exseq.check_alignment(
                fov = 
                ,code = 
                ,ROI_min =[0,0,0]
                ,ROI_max =[100,2048,2048]
                ,layers = 4
                ,save = True
                )
        '''

        if modified:
            if ROI_max == None:
                with h5py.File(self.args.out_dir + 'code{}/{}_downsampled.h5'.format(self.args.ref_code,fov), 'r+') as f:
                    fix_vol = f['405'][:,0,0]
                    ROI_max = [len(fix_vol),1024,1024]
            
            z_inds = np.linspace(ROI_min[0], ROI_max[0]-1, num_layer)
            z_inds = [int(x) for x in z_inds]
            
            
            fig, ax = plt.subplots(len(z_inds), 4, figsize = (20, 5*len(z_inds)))

            with h5py.File(self.args.out_dir + 'code{}/{}_downsampled.h5'.format(self.args.ref_code,fov), 'r+') as f:
                fix_vol = f['405']

                with h5py.File(self.args.out_dir + 'code{}/{}_downsampled.h5'.format(code,fov), 'r+') as f:
                    mov_vol = f['405']

                    for row, z in enumerate(z_inds):
                        ax[row,0].imshow(fix_vol[z,:,:])
                        ax[row,0].set_title('code0 z = {}'.format(z))
                        ax[row,1].imshow(mov_vol[z,:,:])
                        ax[row,1].set_title('code{} z = {}'.format(code,z))

                        ax[row,2].imshow(fix_vol[z,ROI_min[1]:ROI_max[1],ROI_min[2]:ROI_max[2]])
                        ax[row,2].set_title('code0 z = {}'.format(z))
                        ax[row,3].imshow(mov_vol[z,ROI_min[1]:ROI_max[1],ROI_min[2]:ROI_max[2]])
                        ax[row,3].set_title('code{} z = {}'.format(code,z))

        else:
            if ROI_max == None:
                with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(self.args.ref_code,fov), 'r+') as f:
                    fix_vol = f['405'][:,0,0]
                    ROI_max = [len(fix_vol),2048,2048]
            
            z_inds = np.linspace(ROI_min[0], ROI_max[0]-1, num_layer)
            z_inds = [int(x) for x in z_inds]
            
            
            fig, ax = plt.subplots(len(z_inds), 4, figsize = (20, 5*len(z_inds)))

            with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(self.args.ref_code,fov), 'r+') as f:
                fix_vol = f['405']

                with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(code,fov), 'r+') as f:
                    mov_vol = f['405']

                    for row, z in enumerate(z_inds):
                        ax[row,0].imshow(fix_vol[z,:,:])
                        ax[row,0].set_title('code0 z = {}'.format(z))
                        ax[row,1].imshow(mov_vol[z,:,:])
                        ax[row,1].set_title('code{} z = {}'.format(code,z))

                        ax[row,2].imshow(fix_vol[z,ROI_min[1]:ROI_max[1],ROI_min[2]:ROI_max[2]])
                        ax[row,2].set_title('code0 z = {}'.format(z))
                        ax[row,3].imshow(mov_vol[z,ROI_min[1]:ROI_max[1],ROI_min[2]:ROI_max[2]])
                        ax[row,3].set_title('code{} z = {}'.format(code,z))
                
        plt.show()
    
    def inspect_alignment_multiFovCode(self, fov_code_pairs, num_layer=4):
        
        '''
        fov_code_pairs = [[fov,code] for fov in range(44) for code in [3] ]
        exseq.inspect_alignment_fovs(fov_code_pairs,num_layer=5)
        '''
        
        if not os.path.exists(self.args.out_dir + 'check_align/'):
            os.mkdir(self.args.out_dir + 'check_align/')
            
        with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(self.args.ref_code,0), 'r+') as f:
                fix_vol = f['405'][:,0,0]

        # z_inds = np.linspace(0, len(fix_vol)-1, num_layer)
        z_inds = np.linspace(0, 199, num_layer)
        z_inds = [int(x) for x in z_inds]
        
        def check_alignment_single(fov,code):
            fig, ax = plt.subplots(len(z_inds), 2, figsize = (10, 5*len(z_inds)))

            with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(self.args.ref_code,fov), 'r+') as f:
                fix_vol = f['405']

                with h5py.File(self.args.out_dir + 'code{}/{}.h5'.format(code,fov), 'r+') as f:
                    mov_vol = f['405']

                    for row, z in enumerate(z_inds):
                        ax[row,0].imshow(fix_vol[z,:,:])
                        ax[row,0].set_title('code0 z = {}'.format(z))
                        ax[row,1].imshow(mov_vol[z,:,:])
                        ax[row,1].set_title('code{} z = {}'.format(code,z))

            plt.savefig(self.args.out_dir + 'check_align/fov_{}_code_{}.jpg'.format(fov,code))
            plt.close()
            
        for fov, code in tqdm(fov_code_pairs):
            check_alignment_single(fov,code)
            
